#!/usr/bin/env bash

# https://github.com/ddollar/heroku-buildpack-apt
function topic() {
  echo "-----> $*"
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

function install_dotnet() {
  local BUILD_DIR="$1"
  local CACHE_DIR="$2"
  local DOTNET_SDK_VERSION="$3"
  local DOTNET_RUNTIME_VERSION="$4"

  local DOTNET_CACHE_LOCATION=${CACHE_DIR}/dotnet/${DOTNET_SDK_VERSION}
  if [ ! -d ${DOTNET_CACHE_LOCATION} ]; then
    topic "Removing old cached .NET version"
    rm -rf ${CACHE_DIR}/dotnet/* || true
    mkdir -p ${DOTNET_CACHE_LOCATION}/{sdk,runtime}

    topic "Fetching .NET SDK"
    local DOTNET_SDK_DOWNLOAD_URL=https://dotnetcli.blob.core.windows.net/dotnet/Sdk/$DOTNET_SDK_VERSION/dotnet-sdk-$DOTNET_SDK_VERSION-linux-x64.tar.gz
    curl -sSL ${DOTNET_SDK_DOWNLOAD_URL} | tar xz -C ${DOTNET_CACHE_LOCATION}/sdk
    find ${DOTNET_CACHE_LOCATION}/sdk/sdk/${DOTNET_SDK_VERSION}/runtimes/* -maxdepth 0 ! -name unix -exec rm -r {} +
    rm -f ${DOTNET_CACHE_LOCATION}/sdk/sdk/${DOTNET_SDK_VERSION}/nuGetPackagesArchive.lzma

    topic "Fetching .NET Runtime"
    local DOTNET_RUNTIME_DOWNLOAD_URL=https://dotnetcli.blob.core.windows.net/dotnet/Runtime/$DOTNET_RUNTIME_VERSION/dotnet-runtime-$DOTNET_RUNTIME_VERSION-linux-x64.tar.gz
    curl -sSL ${DOTNET_RUNTIME_DOWNLOAD_URL} | tar xz -C ${DOTNET_CACHE_LOCATION}/runtime
	
	
	APT_CACHE_DIR="$CACHE_DIR/apt/cache"
	APT_STATE_DIR="$CACHE_DIR/apt/state"

	mkdir -p "$APT_CACHE_DIR/archives/partial"
	mkdir -p "$APT_STATE_DIR/lists/partial"

	APT_OPTIONS="-o debug::nolocking=true -o dir::cache=$APT_CACHE_DIR -o dir::state=$APT_STATE_DIR"
	for PACKAGE in $(libgdiplus libc6-dev libx11-dev); do
		topic "Fetching .debs for $PACKAGE"
		apt-get $APT_OPTIONS -y --force-yes -d install --reinstall $PACKAGE | indent
	done
	mkdir -p $BUILD_DIR/.apt

	for DEB in $(ls -1 $APT_CACHE_DIR/archives/*.deb); do
	  topic "Installing $(basename $DEB)"
	  dpkg -x $DEB $BUILD_DIR/.apt/
	done

	topic "Writing profile script"
	mkdir -p $BUILD_DIR/.profile.d
	cat <<EOF >$BUILD_DIR/.profile.d/000_apt.sh
	export PATH="\$HOME/.apt/usr/bin:\$PATH"
	export LD_LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/usr/lib:\$LD_LIBRARY_PATH"
	export LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/usr/lib:\$LIBRARY_PATH"
	export INCLUDE_PATH="\$HOME/.apt/usr/include:\$INCLUDE_PATH"
	export CPATH="\$INCLUDE_PATH"
	export CPPPATH="\$INCLUDE_PATH"
	export PKG_CONFIG_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/i386-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/pkgconfig:\$PKG_CONFIG_PATH"
	EOF

	export PATH="$BUILD_DIR/.apt/usr/bin:$PATH"
	export LD_LIBRARY_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu:$BUILD_DIR/.apt/usr/lib:$LD_LIBRARY_PATH"
	export LIBRARY_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu:$BUILD_DIR/.apt/usr/lib:$LIBRARY_PATH"
	export INCLUDE_PATH="$BUILD_DIR/.apt/usr/include:$INCLUDE_PATH"
	export CPATH="$INCLUDE_PATH"
	export CPPPATH="$INCLUDE_PATH"
	export PKG_CONFIG_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/pkgconfig:$PKG_CONFIG_PATH"
  fi

  export PATH="${DOTNET_CACHE_LOCATION}/sdk:$PATH"
  mkdir -p ${BUILD_DIR}/.heroku/dotnet
  cp -r ${DOTNET_CACHE_LOCATION}/runtime ${BUILD_DIR}/.heroku/dotnet
}

export_env_dir() {
  local env_dir=$1
  if [ -d "$env_dir" ]; then
    local whitelist_regex=${2:-''}
    local blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH|LANG)$'}
    if [ -d "$env_dir" ]; then
      for e in $(ls $env_dir); do
        echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
        export "$e=$(cat $env_dir/$e)"
        :
      done
    fi
  fi
}
